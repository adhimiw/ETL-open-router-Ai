version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: eetl_postgres
    environment:
      POSTGRES_DB: eetl_db
      POSTGRES_USER: eetl_user
      POSTGRES_PASSWORD: eetl_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - eetl_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U eetl_user -d eetl_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and Celery
  redis:
    image: redis:7-alpine
    container_name: eetl_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - eetl_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: eetl_backend
    environment:
      - DEBUG=True
      - SECRET_KEY=your-secret-key-here
      - DATABASE_URL=postgresql://eetl_user:eetl_password@postgres:5432/eetl_db
      - REDIS_URL=redis://redis:6379/0
      - OPENROUTER_API_KEY=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
      - OPENROUTER_MODEL=deepseek/deepseek-chat
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
    volumes:
      - ./backend:/app
      - media_files:/app/media
      - static_files:/app/staticfiles
      - upload_files:/app/uploads
      - chroma_data:/app/chroma_db
      - logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - eetl_network
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: eetl_celery_worker
    environment:
      - DEBUG=True
      - SECRET_KEY=your-secret-key-here
      - DATABASE_URL=postgresql://eetl_user:eetl_password@postgres:5432/eetl_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OPENROUTER_API_KEY=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
    volumes:
      - ./backend:/app
      - media_files:/app/media
      - upload_files:/app/uploads
      - chroma_data:/app/chroma_db
      - logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - eetl_network
    command: celery -A core worker --loglevel=info

  # Celery Beat (Scheduler)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: eetl_celery_beat
    environment:
      - DEBUG=True
      - SECRET_KEY=your-secret-key-here
      - DATABASE_URL=postgresql://eetl_user:eetl_password@postgres:5432/eetl_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - celery_beat_data:/app/celerybeat-schedule
      - logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - eetl_network
    command: celery -A core beat --loglevel=info

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: eetl_frontend
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8000/api
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - eetl_network
    command: npm run dev

  # Nginx (Production only)
  nginx:
    image: nginx:alpine
    container_name: eetl_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static_files:/var/www/static
      - media_files:/var/www/media
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - eetl_network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  media_files:
  static_files:
  upload_files:
  chroma_data:
  celery_beat_data:
  logs:

networks:
  eetl_network:
    driver: bridge
